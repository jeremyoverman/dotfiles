" Plugins

" Install vim-plug if it's not already installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
" COC
Plug 'neoclide/coc.nvim', {'do': './install.sh nightly'}
Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-python', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-highlight', {'do': 'yarn install --frozen-lockfile'}
" End COC
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'HerringtonDarkholme/yats.vim'
Plug 't9md/vim-choosewin'
Plug 'heavenshell/vim-jsdoc'
Plug 'vimwiki/vimwiki'
Plug 'Galooshi/vim-import-js', { 'do': 'npm install -g import-js' }
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'
Plug 'jiangmiao/auto-pairs'
Plug 'itchyny/lightline.vim'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'Shougo/echodoc.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'itchyny/calendar.vim'
call plug#end()

let mapleader = ","

" Display
set noshowmode
set cmdheight=2

" Wrap
set nowrap

" Clipboard
set clipboard=unnamed

" Tabs
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smartindent

" Tab Completion
set cot+=preview

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"

" Colors
if (has("nvim"))
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

if (has("termguicolors"))
  set termguicolors
endif

let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set background=dark
colorscheme palenight
let g:lightline = {
    \ 'colorscheme': 'palenight',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'gitbranch', 'cocstatus', 'readonly', 'filename', 'modified' ] ]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'fugitive#head',
    \   'cocstatus': 'coc#status'
    \ },
    \ }

syntax on

" Gutters
set number
set updatetime=100
set signcolumn=yes

function! ToggleLineNumbers()
    if &relativenumber == 1
        set norelativenumber
    else
        set relativenumber
    endif
endfunction

map <Leader>l :call ToggleLineNumbers()<Cr>

" Window management
set splitbelow
set splitright
set noea

map <Left> <C-w>2<
map <Right> <C-w>2>
map <Up> <C-w>+
map <Down> <C-w>-

nmap <Leader>v <Plug>(choosewin)
let g:choosewin_overlay_enable = 1

" NERDTree Confirguration
let g:NERDTreeNodeDelimiter = "\u00a0"
map <Leader>f :NERDTreeToggle<Enter>

" VimWiki
autocmd BufEnter diary.wiki VimwikiDiaryGenerateLinks
autocmd FileType calendar nmap <buffer> <CR> :call vimwiki#diary#calendar_action(b:calendar.day().get_day(), b:calendar.day().get_month(), b:calendar.day().get_year(), b:calendar.day().week(), "V")<CR>
map <Leader>w/ :VimwikiSearch /\c

let g:javascript_plugin_jsdoc = 1

" Search
set ignorecase
set smartcase
map <Leader>s :Ag 

" Directories
set undofile
set backup

set directory=$HOME/.vim/swapfiles//
set backupdir=$HOME/.vim/backups//
set undodir=$HOME/.vim/undodir//

